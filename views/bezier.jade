html
  style.
    .save{
      position: absolute;
      top: 10;
      left: 10;
      width: 45px;
      height: 20px;
    }
    input[name=canvas_name]{
      position: absolute;
      top: 10px;
      left: 65px;
      width: 165px;
      height: 20px;
    }
    .saved{
      position: absolute;
      top: 10;
      left: 240;
    }
    .load{
      position: absolute;
      top: 40;
      left: 10;
      width: 45px;
      height: 20px;
    }
    .load_menu{
      margin: 20px;
    }
    .container{
      position: absolute;
      top: 70;
      left: 10;
      width: 100px;
      height: 200px;
    }
    .canvas_indices{
      width: 45;
      height: 20px;
    }
  body
    form
      input(placeholder='name' type='text' name='canvas_name' required)
      button.save SAVE
    div.saved Saved!
    button.load LOAD
    div.container
      div.load_menu
    canvas#canvas
    script(src='/js/point.js')
    script(src='/js/canvas_state.js')
    script(src='/js/array_plugin.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js'
          integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4='
          crossorigin='anonymous')
    script.
      var canvasState = new CanvasState();
      
      var canvas = document.getElementById('canvas');
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
      var ctx = canvas.getContext ( "2d" );
      ctx.save ();
      var radius = 5;
      var counter = 0;
      var bezierStartPoint;
      function Point(x,y){
        if (arguments.length == 2) {
          this.x = x || 0;
          this.y = y || 0;
        } else {// Point(e)
          e = x; // e: Event
          this.x = e.clientX - 9 || 0;
          this.y = e.clientY - 10 || 0;
        }
      }
      function Shape(point, radius){
        this.drawing = true;
        this.point = point;
        this.radius = radius;
        this.draw = function(){
          ctx.beginPath();
          ctx.arc(this.point.x, this.point.y, this.radius, 0, Math.PI*2);
          ctx.fillStyle = 'tomato';
          ctx.fill()
          ctx.closePath();
        }
      }
      myShapes = [];
      Clear = function(){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }

      var controller = function(e){
        if(counter%2 == 0)
          startPoint(e);
        else
          endPoint(e);
        counter++;
      }

      var bezierDraw = function(e){
        // Tracking of Start Point, cp1, cp2, End Point
        // Start Point == cp1
        start = new Point(myShapes.nextToLast().point.x, myShapes.nextToLast().point.y)
        cp2 = new Point(e)
        end = new Point(myShapes.last().point.x, myShapes.last().point.y)
        Clear();
        curve = new canvasState.curve(start, null, cp2, end)
        curve.draw(ctx);
      }
      var startPoint = function(e){
        console.log('start')
        bezierStartPoint = new Point(e)
        circle = new Shape(bezierStartPoint, radius)
        circle.draw();
        myShapes.push(circle);
        console.log('x: ' + bezierStartPoint.x)
        console.log('y: ' + bezierStartPoint.y)
      }
      var endPoint = function(e){
        console.log('end')
        bezierEndPoint = new Point(e)
        circle = new Shape(bezierEndPoint, radius)
        circle.draw();
        myShapes.push(circle);

        canvas.removeEventListener('mousedown', controller);
        canvas.addEventListener('mousemove', bezierDraw);
        canvas.addEventListener('mousedown', stopBezier);
        console.log('event added')
      }
      stopBezier = function(e){
        canvas.removeEventListener('mousemove', bezierDraw);
        canvasState.saveNewCurve();
        canvas.removeEventListener('mousedown', stopBezier);
        canvas.addEventListener('mousedown', controller);
      }
      DrawAll = function(){
        Clear();
        myShapes.forEach(function(circle){
          circle.draw();
        })
        canvasState.curves.forEach(function(curve){
          curve.draw(ctx);
        })
      }


      canvas.addEventListener('mousedown', controller);
      window.addEventListener('keypress', function(e){
        console.log('keypressed');
        code = e.which || e.keyCode;
        if(100 == code){
          console.log('code == 100');
          DrawAll();
        }
      });

      $(document).ready(function() {
        $(".saved").hide();
        $('.save').click(function(e){
          e.preventDefault()
          _name = $('input[name=canvas_name]').val()
          $.ajax({
            url: '/bezier/save',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(canvasState.toJSON(_name)),
            success: function(){
              $(".saved").show();
              $(".saved").delay(2000).fadeOut(1000); 
            }
          })
        });

        $('.load').click(function(){
          $.ajax({
            url: '/canvas/index',
            type: 'GET',
            contentType: 'application/json',
            success: function(data){
              $('.load_menu').empty();
              data.list.forEach(function(_canvas){
                $('.load_menu').append('<button class="canvas_indices" id="' + _canvas.id + '"> ' + _canvas.name + ' </button>')
                $('#' + _canvas.id).click(function(){
                  $.ajax({
                    url: '/bezier/load/' + _canvas.id,
                    type: 'GET',
                    contentType: 'application/json',
                    success: function(data){
                      Clear();
                      canvasState.load(data, ctx);
                    }
                  })
                })
              })
            }
          })
        })
      });