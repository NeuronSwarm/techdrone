html
  link(href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css", rel='stylesheet', crossorigin="anonymous")
  link(href="css/bezier.css", rel='stylesheet')
  body
    .col-md-4
    .col-md-4.title-panel
      h1.title DRAW BEZIER CURVES
    form
      .canvas_name
        input(placeholder='name' type='text' name='canvas_name' required)
      button.save.UIbtn SAVE
    .saved.onsave-msg Saved!
    .presence-error.onsave-msg Please name your drawing first.
    button.load.UIbtn LOAD
    .menu.loadable
      .load_menu
    .instructions.loadable
      h2 HINT
      li Click to create endpoint
      li Move & repeat
      li Move & observe
      li Click to finish
      li Repeat & have fun

    canvas#canvas
    canvas#tmpCanvas
    script(src='/js/point.js')
    script(src='/js/canvas_state.js')
    script(src='/js/array_plugin.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js'
          integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4='
          crossorigin='anonymous')
    // exposes the client variable
    script(src='/js/bezier/client.js')
    script.
      var tmpCanvasDraw = function(curve, ctx){
        Clear(ctx);
        curve.draw(ctx);
      }
      var setCanvasSize = function(canvas){
        canvas.width = window.innerWidth
        canvas.height = window.innerHeight
      }
      var canvasState = new CanvasState();
      var client = new Client();
      
      var canvas = document.getElementById('canvas');
      setCanvasSize(canvas);
      var ctx = canvas.getContext ( "2d" );
      ctx.save ();

      $tmpCanvas = $('#tmpCanvas');
      tmpCanvas = $('#tmpCanvas')[0];
      setCanvasSize(tmpCanvas);
      var tmpCTX = tmpCanvas.getContext('2d');
      var radius = 5;
      var counter = 0;
      var bezierStartPoint;
      function Point(x,y){
        if (arguments.length == 2) {
          this.x = x || 0;
          this.y = y || 0;
        } else {// Point(e)
          e = x; // e: Event
          this.x = e.clientX - 9 || 0;
          this.y = e.clientY - 10 || 0;
        }
      }
      function Shape(point, radius){
        this.drawing = true;
        this.point = point;
        this.radius = radius;
        this.draw = function(){
          ctx.beginPath();
          ctx.arc(this.point.x, this.point.y, this.radius, 0, Math.PI*2);
          ctx.fillStyle = 'tomato';
          ctx.fill()
          ctx.closePath();
        }
      }
      myShapes = [];
      Clear = function(ctx){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }

      var controller = function(e){
        if(counter%2 == 0)
          startPoint(e);
        else
          endPoint(e);
        counter++;
      }

      var bezierDraw = function(e){
        // Tracking of Start Point, cp1, cp2, End Point
        // Start Point == cp1
        start = new Point(myShapes.nextToLast().point.x, myShapes.nextToLast().point.y)
        cp2 = new Point(e)
        end = new Point(myShapes.last().point.x, myShapes.last().point.y)
        //- Clear();
        curve = new canvasState.curve(start, null, cp2, end)
        tmpCanvasDraw(curve, tmpCTX)
        //- curve.draw(ctx);
        client.send(JSON.stringify(curve.toJSON()));
      }
      // create tmp canvas based on two endpoints: first and last
      var startPoint = function(e){
        console.log('start')
        bezierStartPoint = new Point(e)
        circle = new Shape(bezierStartPoint, radius)
        circle.draw();
        myShapes.push(circle);
        console.log('x: ' + bezierStartPoint.x)
        console.log('y: ' + bezierStartPoint.y)
      }
      var endPoint = function(e){
        console.log('end')
        bezierEndPoint = new Point(e)
        circle = new Shape(bezierEndPoint, radius)
        circle.draw();
        myShapes.push(circle);


        $tmpCanvas.off('mousedown', controller);
        $tmpCanvas.on('mousemove', bezierDraw);
        $tmpCanvas.on('mousedown', stopBezier);
        console.log('event added')
      }
      stopBezier = function(e){
        $tmpCanvas = $('#tmpCanvas')
        $tmpCanvas.off('mousemove', bezierDraw);
        canvasState.saveNewCurve(ctx);
        Clear(tmpCTX)
        $tmpCanvas.off('mousedown', stopBezier);
        $tmpCanvas.on('mousedown', controller);
      }
      DrawAll = function(){
        Clear();
        //- myShapes.forEach(function(circle){
        //-   circle.draw();
        //- })
        canvasState.curves.forEach(function(curve){
          curve.draw(ctx);
        })
      }



      $(document).ready(function() {
        $tmpCanvas.on('mousedown', controller);
        $('.save').click(function(e){
          e.preventDefault()
          _name = $('input[name=canvas_name]').val()
          if(_name == ''){
            $(".presence-error").show();
            $(".presence-error").delay(4000).fadeOut(1000); 
            return;
          }
          $.ajax({
            url: '/bezier/save',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(canvasState.toJSON(_name)),
            success: function(){
              $(".saved").show();
              $(".saved").delay(2000).fadeOut(1000); 
            }
          })
        });

        $('.load').click(function(){
          self = $('.load');
          if(self.text() == 'LOAD') self.text('HIDE');
          else self.text('LOAD');
          $('.loadable').toggle();
          $.ajax({
            url: '/canvas/index',
            type: 'GET',
            contentType: 'application/json',
            success: function(data){
              $('.load_menu').empty();
              data.list.forEach(function(_canvas){
                $('.load_menu').append('<button class="canvas_indices" id="' + _canvas.id + '"> ' + _canvas.name + ' </button>')
                $('#' + _canvas.id).click(function(){
                  $.ajax({
                    url: '/bezier/load/' + _canvas.id,
                    type: 'GET',
                    contentType: 'application/json',
                    success: function(data){
                      Clear(ctx);
                      canvasState.load(data, ctx);
                    }
                  })
                })
              })
            }
          })
        })

        $(window).on('resize', function(e){
          setCanvasSize(tmpCanvas);
          setCanvasSize(canvas);
        })
      });