// Generated by CoffeeScript 1.10.0
(function() {
  var Account, BinaryFile, LocalStrategy, app, bodyParser, cookieParser, express,
  favicon, flash, logger, mongoose, passport,
  path, routes, users, passport, hexCustomers,
  localAuthentication, accessControl, authEndpoints, publicEndpoints;

  Account = require('./models/account')
  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  bodyParser = require('body-parser');

  mongoose = require('mongoose');

  flash = require('connect-flash');

  routes = require('./routes/index');
  api = require('./routes/api');
  passport = require('passport')
  localAuthentication = require('./middleware/authenticate');
  accessControl = require('./middleware/access_control');
  hexCustomers = require('./middleware/hex_customers');
  authEndpoints = require('./routes/auth');
  publicEndpoints = require('./routes/pub');

  fs = require('fs');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(logger('dev'));


  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(flash());

  app.use(express["static"](path.join(__dirname, '/public')));

  app.use(favicon(__dirname + '/public/img/favicon.ico'));

  app.use(require('express-session')({
    secret: 'shit hot',
    resave: false,
    saveUninitialized: false
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  LocalStrategy = require('passport-local').Strategy;
  passport.use(new LocalStrategy(Account.authenticate()));

  passport.serializeUser(Account.serializeUser());

  passport.deserializeUser(Account.deserializeUser());

  app.use('/', hexCustomers, routes);
  app.use('/auth', accessControl, authEndpoints);
  app.use('/pub', accessControl, publicEndpoints);
  app.use('/api', [accessControl, localAuthentication ], api);

  mongoose.Promise = global.Promise;

  if(process.env.NODE_ENV == 'test')
    mongoose.connect('mongodb://localhost/test');
  else
    mongoose.connect('mongodb://localhost/techdrone', function(err){
      if(err) console.log(err);
    });

  mongoose.set('debug', true);
  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    return next(err);
  });
  app.use(function(req, res, next) {
    res.setHeader('Last-Modified', (new Date()).toUTCString());
    next();    
  });
  app.disable('etag');

  var bodyParser = require('body-parser');
  app.use(bodyParser.json()); // support json encoded bodies
  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies

  console.log(`NODE_ENV: ${app.get('env')}`)
  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      console.log(err);
      res.status(err.status || 500);
      return res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
